// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newVSupplierBill(db *gorm.DB, opts ...gen.DOOption) vSupplierBill {
	_vSupplierBill := vSupplierBill{}

	_vSupplierBill.vSupplierBillDo.UseDB(db, opts...)
	_vSupplierBill.vSupplierBillDo.UseModel(&model.VSupplierBill{})

	tableName := _vSupplierBill.vSupplierBillDo.TableName()
	_vSupplierBill.ALL = field.NewAsterisk(tableName)
	_vSupplierBill.BillID = field.NewInt32(tableName, "bill_id")
	_vSupplierBill.SupplierID = field.NewInt32(tableName, "supplier_id")
	_vSupplierBill.BillStartDate = field.NewTime(tableName, "bill_start_date")
	_vSupplierBill.BillDueDate = field.NewTime(tableName, "bill_due_date")
	_vSupplierBill.BillNumber = field.NewString(tableName, "bill_number")
	_vSupplierBill.BillOrderNumber = field.NewString(tableName, "bill_order_number")
	_vSupplierBill.BillStatus = field.NewString(tableName, "bill_status")
	_vSupplierBill.BillType = field.NewString(tableName, "bill_type")
	_vSupplierBill.SupplierName = field.NewString(tableName, "supplier_name")
	_vSupplierBill.SupplierType = field.NewString(tableName, "supplier_type")
	_vSupplierBill.BillTotal = field.NewFloat64(tableName, "bill_total")

	_vSupplierBill.fillFieldMap()

	return _vSupplierBill
}

// vSupplierBill VIEW
type vSupplierBill struct {
	vSupplierBillDo

	ALL             field.Asterisk
	BillID          field.Int32
	SupplierID      field.Int32
	BillStartDate   field.Time
	BillDueDate     field.Time
	BillNumber      field.String
	BillOrderNumber field.String
	BillStatus      field.String
	BillType        field.String
	SupplierName    field.String
	SupplierType    field.String
	BillTotal       field.Float64

	fieldMap map[string]field.Expr
}

func (v vSupplierBill) Table(newTableName string) *vSupplierBill {
	v.vSupplierBillDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vSupplierBill) As(alias string) *vSupplierBill {
	v.vSupplierBillDo.DO = *(v.vSupplierBillDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vSupplierBill) updateTableName(table string) *vSupplierBill {
	v.ALL = field.NewAsterisk(table)
	v.BillID = field.NewInt32(table, "bill_id")
	v.SupplierID = field.NewInt32(table, "supplier_id")
	v.BillStartDate = field.NewTime(table, "bill_start_date")
	v.BillDueDate = field.NewTime(table, "bill_due_date")
	v.BillNumber = field.NewString(table, "bill_number")
	v.BillOrderNumber = field.NewString(table, "bill_order_number")
	v.BillStatus = field.NewString(table, "bill_status")
	v.BillType = field.NewString(table, "bill_type")
	v.SupplierName = field.NewString(table, "supplier_name")
	v.SupplierType = field.NewString(table, "supplier_type")
	v.BillTotal = field.NewFloat64(table, "bill_total")

	v.fillFieldMap()

	return v
}

func (v *vSupplierBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vSupplierBill) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 11)
	v.fieldMap["bill_id"] = v.BillID
	v.fieldMap["supplier_id"] = v.SupplierID
	v.fieldMap["bill_start_date"] = v.BillStartDate
	v.fieldMap["bill_due_date"] = v.BillDueDate
	v.fieldMap["bill_number"] = v.BillNumber
	v.fieldMap["bill_order_number"] = v.BillOrderNumber
	v.fieldMap["bill_status"] = v.BillStatus
	v.fieldMap["bill_type"] = v.BillType
	v.fieldMap["supplier_name"] = v.SupplierName
	v.fieldMap["supplier_type"] = v.SupplierType
	v.fieldMap["bill_total"] = v.BillTotal
}

func (v vSupplierBill) clone(db *gorm.DB) vSupplierBill {
	v.vSupplierBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vSupplierBill) replaceDB(db *gorm.DB) vSupplierBill {
	v.vSupplierBillDo.ReplaceDB(db)
	return v
}

type vSupplierBillDo struct{ gen.DO }

func (v vSupplierBillDo) Debug() *vSupplierBillDo {
	return v.withDO(v.DO.Debug())
}

func (v vSupplierBillDo) WithContext(ctx context.Context) *vSupplierBillDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vSupplierBillDo) ReadDB() *vSupplierBillDo {
	return v.Clauses(dbresolver.Read)
}

func (v vSupplierBillDo) WriteDB() *vSupplierBillDo {
	return v.Clauses(dbresolver.Write)
}

func (v vSupplierBillDo) Session(config *gorm.Session) *vSupplierBillDo {
	return v.withDO(v.DO.Session(config))
}

func (v vSupplierBillDo) Clauses(conds ...clause.Expression) *vSupplierBillDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vSupplierBillDo) Returning(value interface{}, columns ...string) *vSupplierBillDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vSupplierBillDo) Not(conds ...gen.Condition) *vSupplierBillDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vSupplierBillDo) Or(conds ...gen.Condition) *vSupplierBillDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vSupplierBillDo) Select(conds ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vSupplierBillDo) Where(conds ...gen.Condition) *vSupplierBillDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vSupplierBillDo) Order(conds ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vSupplierBillDo) Distinct(cols ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vSupplierBillDo) Omit(cols ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vSupplierBillDo) Join(table schema.Tabler, on ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vSupplierBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vSupplierBillDo) RightJoin(table schema.Tabler, on ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vSupplierBillDo) Group(cols ...field.Expr) *vSupplierBillDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vSupplierBillDo) Having(conds ...gen.Condition) *vSupplierBillDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vSupplierBillDo) Limit(limit int) *vSupplierBillDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vSupplierBillDo) Offset(offset int) *vSupplierBillDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vSupplierBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vSupplierBillDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vSupplierBillDo) Unscoped() *vSupplierBillDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vSupplierBillDo) Create(values ...*model.VSupplierBill) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vSupplierBillDo) CreateInBatches(values []*model.VSupplierBill, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vSupplierBillDo) Save(values ...*model.VSupplierBill) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vSupplierBillDo) First() (*model.VSupplierBill, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierBill), nil
	}
}

func (v vSupplierBillDo) Take() (*model.VSupplierBill, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierBill), nil
	}
}

func (v vSupplierBillDo) Last() (*model.VSupplierBill, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierBill), nil
	}
}

func (v vSupplierBillDo) Find() ([]*model.VSupplierBill, error) {
	result, err := v.DO.Find()
	return result.([]*model.VSupplierBill), err
}

func (v vSupplierBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VSupplierBill, err error) {
	buf := make([]*model.VSupplierBill, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vSupplierBillDo) FindInBatches(result *[]*model.VSupplierBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vSupplierBillDo) Attrs(attrs ...field.AssignExpr) *vSupplierBillDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vSupplierBillDo) Assign(attrs ...field.AssignExpr) *vSupplierBillDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vSupplierBillDo) Joins(fields ...field.RelationField) *vSupplierBillDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vSupplierBillDo) Preload(fields ...field.RelationField) *vSupplierBillDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vSupplierBillDo) FirstOrInit() (*model.VSupplierBill, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierBill), nil
	}
}

func (v vSupplierBillDo) FirstOrCreate() (*model.VSupplierBill, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierBill), nil
	}
}

func (v vSupplierBillDo) FindByPage(offset int, limit int) (result []*model.VSupplierBill, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vSupplierBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vSupplierBillDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vSupplierBillDo) Delete(models ...*model.VSupplierBill) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vSupplierBillDo) withDO(do gen.Dao) *vSupplierBillDo {
	v.DO = *do.(*gen.DO)
	return v
}
