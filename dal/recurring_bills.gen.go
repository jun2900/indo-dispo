// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newRecurringBill(db *gorm.DB, opts ...gen.DOOption) recurringBill {
	_recurringBill := recurringBill{}

	_recurringBill.recurringBillDo.UseDB(db, opts...)
	_recurringBill.recurringBillDo.UseModel(&model.RecurringBill{})

	tableName := _recurringBill.recurringBillDo.TableName()
	_recurringBill.ALL = field.NewAsterisk(tableName)
	_recurringBill.ID = field.NewInt32(tableName, "id")
	_recurringBill.SupplierID = field.NewInt32(tableName, "supplier_id")
	_recurringBill.Frequency = field.NewString(tableName, "frequency")
	_recurringBill.Total = field.NewFloat64(tableName, "total")
	_recurringBill.Notes = field.NewString(tableName, "notes")
	_recurringBill.ShippingCost = field.NewFloat64(tableName, "shipping_cost")
	_recurringBill.AccountNumber = field.NewString(tableName, "account_number")
	_recurringBill.BankName = field.NewString(tableName, "bank_name")
	_recurringBill.StartDate = field.NewTime(tableName, "start_date")
	_recurringBill.EndDate = field.NewTime(tableName, "end_date")
	_recurringBill.PaymentDue = field.NewInt32(tableName, "payment_due")
	_recurringBill.Status = field.NewString(tableName, "status")

	_recurringBill.fillFieldMap()

	return _recurringBill
}

type recurringBill struct {
	recurringBillDo

	ALL           field.Asterisk
	ID            field.Int32
	SupplierID    field.Int32
	Frequency     field.String
	Total         field.Float64
	Notes         field.String
	ShippingCost  field.Float64
	AccountNumber field.String
	BankName      field.String
	StartDate     field.Time
	EndDate       field.Time
	PaymentDue    field.Int32
	Status        field.String

	fieldMap map[string]field.Expr
}

func (r recurringBill) Table(newTableName string) *recurringBill {
	r.recurringBillDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recurringBill) As(alias string) *recurringBill {
	r.recurringBillDo.DO = *(r.recurringBillDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recurringBill) updateTableName(table string) *recurringBill {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.SupplierID = field.NewInt32(table, "supplier_id")
	r.Frequency = field.NewString(table, "frequency")
	r.Total = field.NewFloat64(table, "total")
	r.Notes = field.NewString(table, "notes")
	r.ShippingCost = field.NewFloat64(table, "shipping_cost")
	r.AccountNumber = field.NewString(table, "account_number")
	r.BankName = field.NewString(table, "bank_name")
	r.StartDate = field.NewTime(table, "start_date")
	r.EndDate = field.NewTime(table, "end_date")
	r.PaymentDue = field.NewInt32(table, "payment_due")
	r.Status = field.NewString(table, "status")

	r.fillFieldMap()

	return r
}

func (r *recurringBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recurringBill) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["id"] = r.ID
	r.fieldMap["supplier_id"] = r.SupplierID
	r.fieldMap["frequency"] = r.Frequency
	r.fieldMap["total"] = r.Total
	r.fieldMap["notes"] = r.Notes
	r.fieldMap["shipping_cost"] = r.ShippingCost
	r.fieldMap["account_number"] = r.AccountNumber
	r.fieldMap["bank_name"] = r.BankName
	r.fieldMap["start_date"] = r.StartDate
	r.fieldMap["end_date"] = r.EndDate
	r.fieldMap["payment_due"] = r.PaymentDue
	r.fieldMap["status"] = r.Status
}

func (r recurringBill) clone(db *gorm.DB) recurringBill {
	r.recurringBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recurringBill) replaceDB(db *gorm.DB) recurringBill {
	r.recurringBillDo.ReplaceDB(db)
	return r
}

type recurringBillDo struct{ gen.DO }

func (r recurringBillDo) Debug() *recurringBillDo {
	return r.withDO(r.DO.Debug())
}

func (r recurringBillDo) WithContext(ctx context.Context) *recurringBillDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recurringBillDo) ReadDB() *recurringBillDo {
	return r.Clauses(dbresolver.Read)
}

func (r recurringBillDo) WriteDB() *recurringBillDo {
	return r.Clauses(dbresolver.Write)
}

func (r recurringBillDo) Session(config *gorm.Session) *recurringBillDo {
	return r.withDO(r.DO.Session(config))
}

func (r recurringBillDo) Clauses(conds ...clause.Expression) *recurringBillDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recurringBillDo) Returning(value interface{}, columns ...string) *recurringBillDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recurringBillDo) Not(conds ...gen.Condition) *recurringBillDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recurringBillDo) Or(conds ...gen.Condition) *recurringBillDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recurringBillDo) Select(conds ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recurringBillDo) Where(conds ...gen.Condition) *recurringBillDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recurringBillDo) Order(conds ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recurringBillDo) Distinct(cols ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recurringBillDo) Omit(cols ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recurringBillDo) Join(table schema.Tabler, on ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recurringBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recurringBillDo) RightJoin(table schema.Tabler, on ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recurringBillDo) Group(cols ...field.Expr) *recurringBillDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recurringBillDo) Having(conds ...gen.Condition) *recurringBillDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recurringBillDo) Limit(limit int) *recurringBillDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recurringBillDo) Offset(offset int) *recurringBillDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recurringBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *recurringBillDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recurringBillDo) Unscoped() *recurringBillDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recurringBillDo) Create(values ...*model.RecurringBill) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recurringBillDo) CreateInBatches(values []*model.RecurringBill, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recurringBillDo) Save(values ...*model.RecurringBill) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recurringBillDo) First() (*model.RecurringBill, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecurringBill), nil
	}
}

func (r recurringBillDo) Take() (*model.RecurringBill, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecurringBill), nil
	}
}

func (r recurringBillDo) Last() (*model.RecurringBill, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecurringBill), nil
	}
}

func (r recurringBillDo) Find() ([]*model.RecurringBill, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecurringBill), err
}

func (r recurringBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecurringBill, err error) {
	buf := make([]*model.RecurringBill, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recurringBillDo) FindInBatches(result *[]*model.RecurringBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recurringBillDo) Attrs(attrs ...field.AssignExpr) *recurringBillDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recurringBillDo) Assign(attrs ...field.AssignExpr) *recurringBillDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recurringBillDo) Joins(fields ...field.RelationField) *recurringBillDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recurringBillDo) Preload(fields ...field.RelationField) *recurringBillDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recurringBillDo) FirstOrInit() (*model.RecurringBill, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecurringBill), nil
	}
}

func (r recurringBillDo) FirstOrCreate() (*model.RecurringBill, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecurringBill), nil
	}
}

func (r recurringBillDo) FindByPage(offset int, limit int) (result []*model.RecurringBill, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recurringBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recurringBillDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recurringBillDo) Delete(models ...*model.RecurringBill) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recurringBillDo) withDO(do gen.Dao) *recurringBillDo {
	r.DO = *do.(*gen.DO)
	return r
}
