// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newBill(db *gorm.DB, opts ...gen.DOOption) bill {
	_bill := bill{}

	_bill.billDo.UseDB(db, opts...)
	_bill.billDo.UseModel(&model.Bill{})

	tableName := _bill.billDo.TableName()
	_bill.ALL = field.NewAsterisk(tableName)
	_bill.BillID = field.NewInt32(tableName, "bill_id")
	_bill.SupplierID = field.NewInt32(tableName, "supplier_id")
	_bill.BillStartDate = field.NewTime(tableName, "bill_start_date")
	_bill.BillDueDate = field.NewTime(tableName, "bill_due_date")
	_bill.BillNumber = field.NewString(tableName, "bill_number")
	_bill.BillOrderNumber = field.NewString(tableName, "bill_order_number")
	_bill.BillTotal = field.NewFloat64(tableName, "bill_total")
	_bill.BillStatus = field.NewString(tableName, "bill_status")
	_bill.BillType = field.NewString(tableName, "bill_type")
	_bill.BillShippingCost = field.NewFloat64(tableName, "bill_shipping_cost")
	_bill.BillAccountNumber = field.NewString(tableName, "bill_account_number")
	_bill.BillBankName = field.NewString(tableName, "bill_bank_name")
	_bill.BillNotes = field.NewString(tableName, "bill_notes")
	_bill.RecurringBillID = field.NewInt32(tableName, "recurring_bill_id")

	_bill.fillFieldMap()

	return _bill
}

type bill struct {
	billDo

	ALL               field.Asterisk
	BillID            field.Int32
	SupplierID        field.Int32
	BillStartDate     field.Time
	BillDueDate       field.Time
	BillNumber        field.String
	BillOrderNumber   field.String
	BillTotal         field.Float64
	BillStatus        field.String
	BillType          field.String
	BillShippingCost  field.Float64
	BillAccountNumber field.String
	BillBankName      field.String
	BillNotes         field.String
	RecurringBillID   field.Int32

	fieldMap map[string]field.Expr
}

func (b bill) Table(newTableName string) *bill {
	b.billDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bill) As(alias string) *bill {
	b.billDo.DO = *(b.billDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bill) updateTableName(table string) *bill {
	b.ALL = field.NewAsterisk(table)
	b.BillID = field.NewInt32(table, "bill_id")
	b.SupplierID = field.NewInt32(table, "supplier_id")
	b.BillStartDate = field.NewTime(table, "bill_start_date")
	b.BillDueDate = field.NewTime(table, "bill_due_date")
	b.BillNumber = field.NewString(table, "bill_number")
	b.BillOrderNumber = field.NewString(table, "bill_order_number")
	b.BillTotal = field.NewFloat64(table, "bill_total")
	b.BillStatus = field.NewString(table, "bill_status")
	b.BillType = field.NewString(table, "bill_type")
	b.BillShippingCost = field.NewFloat64(table, "bill_shipping_cost")
	b.BillAccountNumber = field.NewString(table, "bill_account_number")
	b.BillBankName = field.NewString(table, "bill_bank_name")
	b.BillNotes = field.NewString(table, "bill_notes")
	b.RecurringBillID = field.NewInt32(table, "recurring_bill_id")

	b.fillFieldMap()

	return b
}

func (b *bill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bill) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 14)
	b.fieldMap["bill_id"] = b.BillID
	b.fieldMap["supplier_id"] = b.SupplierID
	b.fieldMap["bill_start_date"] = b.BillStartDate
	b.fieldMap["bill_due_date"] = b.BillDueDate
	b.fieldMap["bill_number"] = b.BillNumber
	b.fieldMap["bill_order_number"] = b.BillOrderNumber
	b.fieldMap["bill_total"] = b.BillTotal
	b.fieldMap["bill_status"] = b.BillStatus
	b.fieldMap["bill_type"] = b.BillType
	b.fieldMap["bill_shipping_cost"] = b.BillShippingCost
	b.fieldMap["bill_account_number"] = b.BillAccountNumber
	b.fieldMap["bill_bank_name"] = b.BillBankName
	b.fieldMap["bill_notes"] = b.BillNotes
	b.fieldMap["recurring_bill_id"] = b.RecurringBillID
}

func (b bill) clone(db *gorm.DB) bill {
	b.billDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bill) replaceDB(db *gorm.DB) bill {
	b.billDo.ReplaceDB(db)
	return b
}

type billDo struct{ gen.DO }

func (b billDo) Debug() *billDo {
	return b.withDO(b.DO.Debug())
}

func (b billDo) WithContext(ctx context.Context) *billDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b billDo) ReadDB() *billDo {
	return b.Clauses(dbresolver.Read)
}

func (b billDo) WriteDB() *billDo {
	return b.Clauses(dbresolver.Write)
}

func (b billDo) Session(config *gorm.Session) *billDo {
	return b.withDO(b.DO.Session(config))
}

func (b billDo) Clauses(conds ...clause.Expression) *billDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b billDo) Returning(value interface{}, columns ...string) *billDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b billDo) Not(conds ...gen.Condition) *billDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b billDo) Or(conds ...gen.Condition) *billDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b billDo) Select(conds ...field.Expr) *billDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b billDo) Where(conds ...gen.Condition) *billDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b billDo) Order(conds ...field.Expr) *billDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b billDo) Distinct(cols ...field.Expr) *billDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b billDo) Omit(cols ...field.Expr) *billDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b billDo) Join(table schema.Tabler, on ...field.Expr) *billDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b billDo) LeftJoin(table schema.Tabler, on ...field.Expr) *billDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b billDo) RightJoin(table schema.Tabler, on ...field.Expr) *billDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b billDo) Group(cols ...field.Expr) *billDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b billDo) Having(conds ...gen.Condition) *billDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b billDo) Limit(limit int) *billDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b billDo) Offset(offset int) *billDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b billDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *billDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b billDo) Unscoped() *billDo {
	return b.withDO(b.DO.Unscoped())
}

func (b billDo) Create(values ...*model.Bill) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b billDo) CreateInBatches(values []*model.Bill, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b billDo) Save(values ...*model.Bill) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b billDo) First() (*model.Bill, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Take() (*model.Bill, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Last() (*model.Bill, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Find() ([]*model.Bill, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bill), err
}

func (b billDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bill, err error) {
	buf := make([]*model.Bill, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b billDo) FindInBatches(result *[]*model.Bill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b billDo) Attrs(attrs ...field.AssignExpr) *billDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b billDo) Assign(attrs ...field.AssignExpr) *billDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b billDo) Joins(fields ...field.RelationField) *billDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b billDo) Preload(fields ...field.RelationField) *billDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b billDo) FirstOrInit() (*model.Bill, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) FirstOrCreate() (*model.Bill, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) FindByPage(offset int, limit int) (result []*model.Bill, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b billDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b billDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b billDo) Delete(models ...*model.Bill) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *billDo) withDO(do gen.Dao) *billDo {
	b.DO = *do.(*gen.DO)
	return b
}
