// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newVSupplierInvoice(db *gorm.DB, opts ...gen.DOOption) vSupplierInvoice {
	_vSupplierInvoice := vSupplierInvoice{}

	_vSupplierInvoice.vSupplierInvoiceDo.UseDB(db, opts...)
	_vSupplierInvoice.vSupplierInvoiceDo.UseModel(&model.VSupplierInvoice{})

	tableName := _vSupplierInvoice.vSupplierInvoiceDo.TableName()
	_vSupplierInvoice.ALL = field.NewAsterisk(tableName)
	_vSupplierInvoice.InvoicesID = field.NewInt32(tableName, "invoices_id")
	_vSupplierInvoice.SupplierID = field.NewInt32(tableName, "supplier_id")
	_vSupplierInvoice.InvoiceStartDate = field.NewTime(tableName, "invoice_start_date")
	_vSupplierInvoice.InvoiceDueDate = field.NewTime(tableName, "invoice_due_date")
	_vSupplierInvoice.InvoiceNumber = field.NewString(tableName, "invoice_number")
	_vSupplierInvoice.InvoiceTitle = field.NewString(tableName, "invoice_title")
	_vSupplierInvoice.InvoiceStatus = field.NewString(tableName, "invoice_status")
	_vSupplierInvoice.SupplierName = field.NewString(tableName, "supplier_name")
	_vSupplierInvoice.InvoiceTotal = field.NewFloat64(tableName, "invoice_total")

	_vSupplierInvoice.fillFieldMap()

	return _vSupplierInvoice
}

// vSupplierInvoice VIEW
type vSupplierInvoice struct {
	vSupplierInvoiceDo

	ALL              field.Asterisk
	InvoicesID       field.Int32
	SupplierID       field.Int32
	InvoiceStartDate field.Time
	InvoiceDueDate   field.Time
	InvoiceNumber    field.String
	InvoiceTitle     field.String
	InvoiceStatus    field.String
	SupplierName     field.String
	InvoiceTotal     field.Float64

	fieldMap map[string]field.Expr
}

func (v vSupplierInvoice) Table(newTableName string) *vSupplierInvoice {
	v.vSupplierInvoiceDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vSupplierInvoice) As(alias string) *vSupplierInvoice {
	v.vSupplierInvoiceDo.DO = *(v.vSupplierInvoiceDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vSupplierInvoice) updateTableName(table string) *vSupplierInvoice {
	v.ALL = field.NewAsterisk(table)
	v.InvoicesID = field.NewInt32(table, "invoices_id")
	v.SupplierID = field.NewInt32(table, "supplier_id")
	v.InvoiceStartDate = field.NewTime(table, "invoice_start_date")
	v.InvoiceDueDate = field.NewTime(table, "invoice_due_date")
	v.InvoiceNumber = field.NewString(table, "invoice_number")
	v.InvoiceTitle = field.NewString(table, "invoice_title")
	v.InvoiceStatus = field.NewString(table, "invoice_status")
	v.SupplierName = field.NewString(table, "supplier_name")
	v.InvoiceTotal = field.NewFloat64(table, "invoice_total")

	v.fillFieldMap()

	return v
}

func (v *vSupplierInvoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vSupplierInvoice) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["invoices_id"] = v.InvoicesID
	v.fieldMap["supplier_id"] = v.SupplierID
	v.fieldMap["invoice_start_date"] = v.InvoiceStartDate
	v.fieldMap["invoice_due_date"] = v.InvoiceDueDate
	v.fieldMap["invoice_number"] = v.InvoiceNumber
	v.fieldMap["invoice_title"] = v.InvoiceTitle
	v.fieldMap["invoice_status"] = v.InvoiceStatus
	v.fieldMap["supplier_name"] = v.SupplierName
	v.fieldMap["invoice_total"] = v.InvoiceTotal
}

func (v vSupplierInvoice) clone(db *gorm.DB) vSupplierInvoice {
	v.vSupplierInvoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vSupplierInvoice) replaceDB(db *gorm.DB) vSupplierInvoice {
	v.vSupplierInvoiceDo.ReplaceDB(db)
	return v
}

type vSupplierInvoiceDo struct{ gen.DO }

func (v vSupplierInvoiceDo) Debug() *vSupplierInvoiceDo {
	return v.withDO(v.DO.Debug())
}

func (v vSupplierInvoiceDo) WithContext(ctx context.Context) *vSupplierInvoiceDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vSupplierInvoiceDo) ReadDB() *vSupplierInvoiceDo {
	return v.Clauses(dbresolver.Read)
}

func (v vSupplierInvoiceDo) WriteDB() *vSupplierInvoiceDo {
	return v.Clauses(dbresolver.Write)
}

func (v vSupplierInvoiceDo) Session(config *gorm.Session) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Session(config))
}

func (v vSupplierInvoiceDo) Clauses(conds ...clause.Expression) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vSupplierInvoiceDo) Returning(value interface{}, columns ...string) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vSupplierInvoiceDo) Not(conds ...gen.Condition) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vSupplierInvoiceDo) Or(conds ...gen.Condition) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vSupplierInvoiceDo) Select(conds ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vSupplierInvoiceDo) Where(conds ...gen.Condition) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vSupplierInvoiceDo) Order(conds ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vSupplierInvoiceDo) Distinct(cols ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vSupplierInvoiceDo) Omit(cols ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vSupplierInvoiceDo) Join(table schema.Tabler, on ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vSupplierInvoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vSupplierInvoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vSupplierInvoiceDo) Group(cols ...field.Expr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vSupplierInvoiceDo) Having(conds ...gen.Condition) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vSupplierInvoiceDo) Limit(limit int) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vSupplierInvoiceDo) Offset(offset int) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vSupplierInvoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vSupplierInvoiceDo) Unscoped() *vSupplierInvoiceDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vSupplierInvoiceDo) Create(values ...*model.VSupplierInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vSupplierInvoiceDo) CreateInBatches(values []*model.VSupplierInvoice, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vSupplierInvoiceDo) Save(values ...*model.VSupplierInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vSupplierInvoiceDo) First() (*model.VSupplierInvoice, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierInvoice), nil
	}
}

func (v vSupplierInvoiceDo) Take() (*model.VSupplierInvoice, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierInvoice), nil
	}
}

func (v vSupplierInvoiceDo) Last() (*model.VSupplierInvoice, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierInvoice), nil
	}
}

func (v vSupplierInvoiceDo) Find() ([]*model.VSupplierInvoice, error) {
	result, err := v.DO.Find()
	return result.([]*model.VSupplierInvoice), err
}

func (v vSupplierInvoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VSupplierInvoice, err error) {
	buf := make([]*model.VSupplierInvoice, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vSupplierInvoiceDo) FindInBatches(result *[]*model.VSupplierInvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vSupplierInvoiceDo) Attrs(attrs ...field.AssignExpr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vSupplierInvoiceDo) Assign(attrs ...field.AssignExpr) *vSupplierInvoiceDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vSupplierInvoiceDo) Joins(fields ...field.RelationField) *vSupplierInvoiceDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vSupplierInvoiceDo) Preload(fields ...field.RelationField) *vSupplierInvoiceDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vSupplierInvoiceDo) FirstOrInit() (*model.VSupplierInvoice, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierInvoice), nil
	}
}

func (v vSupplierInvoiceDo) FirstOrCreate() (*model.VSupplierInvoice, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VSupplierInvoice), nil
	}
}

func (v vSupplierInvoiceDo) FindByPage(offset int, limit int) (result []*model.VSupplierInvoice, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vSupplierInvoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vSupplierInvoiceDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vSupplierInvoiceDo) Delete(models ...*model.VSupplierInvoice) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vSupplierInvoiceDo) withDO(do gen.Dao) *vSupplierInvoiceDo {
	v.DO = *do.(*gen.DO)
	return v
}
