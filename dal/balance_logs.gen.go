// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newBalanceLog(db *gorm.DB, opts ...gen.DOOption) balanceLog {
	_balanceLog := balanceLog{}

	_balanceLog.balanceLogDo.UseDB(db, opts...)
	_balanceLog.balanceLogDo.UseModel(&model.BalanceLog{})

	tableName := _balanceLog.balanceLogDo.TableName()
	_balanceLog.ALL = field.NewAsterisk(tableName)
	_balanceLog.BalanceLogID = field.NewInt32(tableName, "balance_log_id")
	_balanceLog.BalanceLogAmount = field.NewFloat64(tableName, "balance_log_amount")
	_balanceLog.BalanceLogNotes = field.NewString(tableName, "balance_log_notes")
	_balanceLog.BalanceLogAttachment = field.NewBytes(tableName, "balance_log_attachment")
	_balanceLog.BalanceLogTimeAdded = field.NewTime(tableName, "balance_log_time_added")

	_balanceLog.fillFieldMap()

	return _balanceLog
}

type balanceLog struct {
	balanceLogDo

	ALL                  field.Asterisk
	BalanceLogID         field.Int32
	BalanceLogAmount     field.Float64
	BalanceLogNotes      field.String
	BalanceLogAttachment field.Bytes
	BalanceLogTimeAdded  field.Time

	fieldMap map[string]field.Expr
}

func (b balanceLog) Table(newTableName string) *balanceLog {
	b.balanceLogDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b balanceLog) As(alias string) *balanceLog {
	b.balanceLogDo.DO = *(b.balanceLogDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *balanceLog) updateTableName(table string) *balanceLog {
	b.ALL = field.NewAsterisk(table)
	b.BalanceLogID = field.NewInt32(table, "balance_log_id")
	b.BalanceLogAmount = field.NewFloat64(table, "balance_log_amount")
	b.BalanceLogNotes = field.NewString(table, "balance_log_notes")
	b.BalanceLogAttachment = field.NewBytes(table, "balance_log_attachment")
	b.BalanceLogTimeAdded = field.NewTime(table, "balance_log_time_added")

	b.fillFieldMap()

	return b
}

func (b *balanceLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *balanceLog) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["balance_log_id"] = b.BalanceLogID
	b.fieldMap["balance_log_amount"] = b.BalanceLogAmount
	b.fieldMap["balance_log_notes"] = b.BalanceLogNotes
	b.fieldMap["balance_log_attachment"] = b.BalanceLogAttachment
	b.fieldMap["balance_log_time_added"] = b.BalanceLogTimeAdded
}

func (b balanceLog) clone(db *gorm.DB) balanceLog {
	b.balanceLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b balanceLog) replaceDB(db *gorm.DB) balanceLog {
	b.balanceLogDo.ReplaceDB(db)
	return b
}

type balanceLogDo struct{ gen.DO }

func (b balanceLogDo) Debug() *balanceLogDo {
	return b.withDO(b.DO.Debug())
}

func (b balanceLogDo) WithContext(ctx context.Context) *balanceLogDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b balanceLogDo) ReadDB() *balanceLogDo {
	return b.Clauses(dbresolver.Read)
}

func (b balanceLogDo) WriteDB() *balanceLogDo {
	return b.Clauses(dbresolver.Write)
}

func (b balanceLogDo) Session(config *gorm.Session) *balanceLogDo {
	return b.withDO(b.DO.Session(config))
}

func (b balanceLogDo) Clauses(conds ...clause.Expression) *balanceLogDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b balanceLogDo) Returning(value interface{}, columns ...string) *balanceLogDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b balanceLogDo) Not(conds ...gen.Condition) *balanceLogDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b balanceLogDo) Or(conds ...gen.Condition) *balanceLogDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b balanceLogDo) Select(conds ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b balanceLogDo) Where(conds ...gen.Condition) *balanceLogDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b balanceLogDo) Order(conds ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b balanceLogDo) Distinct(cols ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b balanceLogDo) Omit(cols ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b balanceLogDo) Join(table schema.Tabler, on ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b balanceLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b balanceLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b balanceLogDo) Group(cols ...field.Expr) *balanceLogDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b balanceLogDo) Having(conds ...gen.Condition) *balanceLogDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b balanceLogDo) Limit(limit int) *balanceLogDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b balanceLogDo) Offset(offset int) *balanceLogDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b balanceLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *balanceLogDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b balanceLogDo) Unscoped() *balanceLogDo {
	return b.withDO(b.DO.Unscoped())
}

func (b balanceLogDo) Create(values ...*model.BalanceLog) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b balanceLogDo) CreateInBatches(values []*model.BalanceLog, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b balanceLogDo) Save(values ...*model.BalanceLog) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b balanceLogDo) First() (*model.BalanceLog, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BalanceLog), nil
	}
}

func (b balanceLogDo) Take() (*model.BalanceLog, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BalanceLog), nil
	}
}

func (b balanceLogDo) Last() (*model.BalanceLog, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BalanceLog), nil
	}
}

func (b balanceLogDo) Find() ([]*model.BalanceLog, error) {
	result, err := b.DO.Find()
	return result.([]*model.BalanceLog), err
}

func (b balanceLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BalanceLog, err error) {
	buf := make([]*model.BalanceLog, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b balanceLogDo) FindInBatches(result *[]*model.BalanceLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b balanceLogDo) Attrs(attrs ...field.AssignExpr) *balanceLogDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b balanceLogDo) Assign(attrs ...field.AssignExpr) *balanceLogDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b balanceLogDo) Joins(fields ...field.RelationField) *balanceLogDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b balanceLogDo) Preload(fields ...field.RelationField) *balanceLogDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b balanceLogDo) FirstOrInit() (*model.BalanceLog, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BalanceLog), nil
	}
}

func (b balanceLogDo) FirstOrCreate() (*model.BalanceLog, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BalanceLog), nil
	}
}

func (b balanceLogDo) FindByPage(offset int, limit int) (result []*model.BalanceLog, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b balanceLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b balanceLogDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b balanceLogDo) Delete(models ...*model.BalanceLog) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *balanceLogDo) withDO(do gen.Dao) *balanceLogDo {
	b.DO = *do.(*gen.DO)
	return b
}
