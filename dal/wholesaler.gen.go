// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newWholesaler(db *gorm.DB, opts ...gen.DOOption) wholesaler {
	_wholesaler := wholesaler{}

	_wholesaler.wholesalerDo.UseDB(db, opts...)
	_wholesaler.wholesalerDo.UseModel(&model.Wholesaler{})

	tableName := _wholesaler.wholesalerDo.TableName()
	_wholesaler.ALL = field.NewAsterisk(tableName)
	_wholesaler.WholesalerID = field.NewInt32(tableName, "wholesaler_id")
	_wholesaler.ItemID = field.NewInt32(tableName, "item_id")
	_wholesaler.WholesalerQty = field.NewInt32(tableName, "wholesaler_qty")
	_wholesaler.WholesalerPrice = field.NewFloat64(tableName, "wholesaler_price")

	_wholesaler.fillFieldMap()

	return _wholesaler
}

type wholesaler struct {
	wholesalerDo

	ALL             field.Asterisk
	WholesalerID    field.Int32
	ItemID          field.Int32
	WholesalerQty   field.Int32
	WholesalerPrice field.Float64

	fieldMap map[string]field.Expr
}

func (w wholesaler) Table(newTableName string) *wholesaler {
	w.wholesalerDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wholesaler) As(alias string) *wholesaler {
	w.wholesalerDo.DO = *(w.wholesalerDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wholesaler) updateTableName(table string) *wholesaler {
	w.ALL = field.NewAsterisk(table)
	w.WholesalerID = field.NewInt32(table, "wholesaler_id")
	w.ItemID = field.NewInt32(table, "item_id")
	w.WholesalerQty = field.NewInt32(table, "wholesaler_qty")
	w.WholesalerPrice = field.NewFloat64(table, "wholesaler_price")

	w.fillFieldMap()

	return w
}

func (w *wholesaler) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wholesaler) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["wholesaler_id"] = w.WholesalerID
	w.fieldMap["item_id"] = w.ItemID
	w.fieldMap["wholesaler_qty"] = w.WholesalerQty
	w.fieldMap["wholesaler_price"] = w.WholesalerPrice
}

func (w wholesaler) clone(db *gorm.DB) wholesaler {
	w.wholesalerDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wholesaler) replaceDB(db *gorm.DB) wholesaler {
	w.wholesalerDo.ReplaceDB(db)
	return w
}

type wholesalerDo struct{ gen.DO }

func (w wholesalerDo) Debug() *wholesalerDo {
	return w.withDO(w.DO.Debug())
}

func (w wholesalerDo) WithContext(ctx context.Context) *wholesalerDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wholesalerDo) ReadDB() *wholesalerDo {
	return w.Clauses(dbresolver.Read)
}

func (w wholesalerDo) WriteDB() *wholesalerDo {
	return w.Clauses(dbresolver.Write)
}

func (w wholesalerDo) Session(config *gorm.Session) *wholesalerDo {
	return w.withDO(w.DO.Session(config))
}

func (w wholesalerDo) Clauses(conds ...clause.Expression) *wholesalerDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wholesalerDo) Returning(value interface{}, columns ...string) *wholesalerDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wholesalerDo) Not(conds ...gen.Condition) *wholesalerDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wholesalerDo) Or(conds ...gen.Condition) *wholesalerDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wholesalerDo) Select(conds ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wholesalerDo) Where(conds ...gen.Condition) *wholesalerDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wholesalerDo) Order(conds ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wholesalerDo) Distinct(cols ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wholesalerDo) Omit(cols ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wholesalerDo) Join(table schema.Tabler, on ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wholesalerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wholesalerDo) RightJoin(table schema.Tabler, on ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wholesalerDo) Group(cols ...field.Expr) *wholesalerDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wholesalerDo) Having(conds ...gen.Condition) *wholesalerDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wholesalerDo) Limit(limit int) *wholesalerDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wholesalerDo) Offset(offset int) *wholesalerDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wholesalerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wholesalerDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wholesalerDo) Unscoped() *wholesalerDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wholesalerDo) Create(values ...*model.Wholesaler) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wholesalerDo) CreateInBatches(values []*model.Wholesaler, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wholesalerDo) Save(values ...*model.Wholesaler) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wholesalerDo) First() (*model.Wholesaler, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wholesaler), nil
	}
}

func (w wholesalerDo) Take() (*model.Wholesaler, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wholesaler), nil
	}
}

func (w wholesalerDo) Last() (*model.Wholesaler, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wholesaler), nil
	}
}

func (w wholesalerDo) Find() ([]*model.Wholesaler, error) {
	result, err := w.DO.Find()
	return result.([]*model.Wholesaler), err
}

func (w wholesalerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Wholesaler, err error) {
	buf := make([]*model.Wholesaler, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wholesalerDo) FindInBatches(result *[]*model.Wholesaler, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wholesalerDo) Attrs(attrs ...field.AssignExpr) *wholesalerDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wholesalerDo) Assign(attrs ...field.AssignExpr) *wholesalerDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wholesalerDo) Joins(fields ...field.RelationField) *wholesalerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wholesalerDo) Preload(fields ...field.RelationField) *wholesalerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wholesalerDo) FirstOrInit() (*model.Wholesaler, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wholesaler), nil
	}
}

func (w wholesalerDo) FirstOrCreate() (*model.Wholesaler, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wholesaler), nil
	}
}

func (w wholesalerDo) FindByPage(offset int, limit int) (result []*model.Wholesaler, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wholesalerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wholesalerDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wholesalerDo) Delete(models ...*model.Wholesaler) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wholesalerDo) withDO(do gen.Dao) *wholesalerDo {
	w.DO = *do.(*gen.DO)
	return w
}
