// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newAttachment(db *gorm.DB, opts ...gen.DOOption) attachment {
	_attachment := attachment{}

	_attachment.attachmentDo.UseDB(db, opts...)
	_attachment.attachmentDo.UseModel(&model.Attachment{})

	tableName := _attachment.attachmentDo.TableName()
	_attachment.ALL = field.NewAsterisk(tableName)
	_attachment.AttachmentID = field.NewInt32(tableName, "attachment_id")
	_attachment.BillID = field.NewInt32(tableName, "bill_id")
	_attachment.RecurringBillID = field.NewInt32(tableName, "recurring_bill_id")
	_attachment.InvoiceID = field.NewInt32(tableName, "invoice_id")
	_attachment.AttachmentName = field.NewString(tableName, "attachment_name")
	_attachment.AttachmentFile = field.NewBytes(tableName, "attachment_file")

	_attachment.fillFieldMap()

	return _attachment
}

type attachment struct {
	attachmentDo

	ALL             field.Asterisk
	AttachmentID    field.Int32
	BillID          field.Int32
	RecurringBillID field.Int32
	InvoiceID       field.Int32
	AttachmentName  field.String
	AttachmentFile  field.Bytes

	fieldMap map[string]field.Expr
}

func (a attachment) Table(newTableName string) *attachment {
	a.attachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachment) As(alias string) *attachment {
	a.attachmentDo.DO = *(a.attachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachment) updateTableName(table string) *attachment {
	a.ALL = field.NewAsterisk(table)
	a.AttachmentID = field.NewInt32(table, "attachment_id")
	a.BillID = field.NewInt32(table, "bill_id")
	a.RecurringBillID = field.NewInt32(table, "recurring_bill_id")
	a.InvoiceID = field.NewInt32(table, "invoice_id")
	a.AttachmentName = field.NewString(table, "attachment_name")
	a.AttachmentFile = field.NewBytes(table, "attachment_file")

	a.fillFieldMap()

	return a
}

func (a *attachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["attachment_id"] = a.AttachmentID
	a.fieldMap["bill_id"] = a.BillID
	a.fieldMap["recurring_bill_id"] = a.RecurringBillID
	a.fieldMap["invoice_id"] = a.InvoiceID
	a.fieldMap["attachment_name"] = a.AttachmentName
	a.fieldMap["attachment_file"] = a.AttachmentFile
}

func (a attachment) clone(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachment) replaceDB(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceDB(db)
	return a
}

type attachmentDo struct{ gen.DO }

func (a attachmentDo) Debug() *attachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentDo) WithContext(ctx context.Context) *attachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentDo) ReadDB() *attachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentDo) WriteDB() *attachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentDo) Session(config *gorm.Session) *attachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentDo) Clauses(conds ...clause.Expression) *attachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentDo) Returning(value interface{}, columns ...string) *attachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentDo) Not(conds ...gen.Condition) *attachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentDo) Or(conds ...gen.Condition) *attachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentDo) Select(conds ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentDo) Where(conds ...gen.Condition) *attachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentDo) Order(conds ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentDo) Distinct(cols ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentDo) Omit(cols ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentDo) Join(table schema.Tabler, on ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentDo) Group(cols ...field.Expr) *attachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentDo) Having(conds ...gen.Condition) *attachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentDo) Limit(limit int) *attachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentDo) Offset(offset int) *attachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *attachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentDo) Unscoped() *attachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentDo) Create(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentDo) CreateInBatches(values []*model.Attachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentDo) Save(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentDo) First() (*model.Attachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Take() (*model.Attachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Last() (*model.Attachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Find() ([]*model.Attachment, error) {
	result, err := a.DO.Find()
	return result.([]*model.Attachment), err
}

func (a attachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attachment, err error) {
	buf := make([]*model.Attachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentDo) FindInBatches(result *[]*model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentDo) Attrs(attrs ...field.AssignExpr) *attachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentDo) Assign(attrs ...field.AssignExpr) *attachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentDo) Joins(fields ...field.RelationField) *attachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentDo) Preload(fields ...field.RelationField) *attachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentDo) FirstOrInit() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FirstOrCreate() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FindByPage(offset int, limit int) (result []*model.Attachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentDo) Delete(models ...*model.Attachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentDo) withDO(do gen.Dao) *attachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
