// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newItemSell(db *gorm.DB, opts ...gen.DOOption) itemSell {
	_itemSell := itemSell{}

	_itemSell.itemSellDo.UseDB(db, opts...)
	_itemSell.itemSellDo.UseModel(&model.ItemSell{})

	tableName := _itemSell.itemSellDo.TableName()
	_itemSell.ALL = field.NewAsterisk(tableName)
	_itemSell.ItemSellID = field.NewInt32(tableName, "item_sell_id")
	_itemSell.ItemID = field.NewInt32(tableName, "item_id")
	_itemSell.InvoiceID = field.NewInt32(tableName, "invoice_id")
	_itemSell.ItemSellQty = field.NewInt32(tableName, "item_sell_qty")
	_itemSell.ItemSellTime = field.NewTime(tableName, "item_sell_time")
	_itemSell.ItemSellDiscount = field.NewFloat64(tableName, "item_sell_discount")
	_itemSell.ItemSellPpn = field.NewInt32(tableName, "item_sell_ppn")
	_itemSell.ItemSellUnit = field.NewString(tableName, "item_sell_unit")

	_itemSell.fillFieldMap()

	return _itemSell
}

type itemSell struct {
	itemSellDo

	ALL              field.Asterisk
	ItemSellID       field.Int32
	ItemID           field.Int32
	InvoiceID        field.Int32
	ItemSellQty      field.Int32
	ItemSellTime     field.Time
	ItemSellDiscount field.Float64
	ItemSellPpn      field.Int32
	ItemSellUnit     field.String

	fieldMap map[string]field.Expr
}

func (i itemSell) Table(newTableName string) *itemSell {
	i.itemSellDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemSell) As(alias string) *itemSell {
	i.itemSellDo.DO = *(i.itemSellDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemSell) updateTableName(table string) *itemSell {
	i.ALL = field.NewAsterisk(table)
	i.ItemSellID = field.NewInt32(table, "item_sell_id")
	i.ItemID = field.NewInt32(table, "item_id")
	i.InvoiceID = field.NewInt32(table, "invoice_id")
	i.ItemSellQty = field.NewInt32(table, "item_sell_qty")
	i.ItemSellTime = field.NewTime(table, "item_sell_time")
	i.ItemSellDiscount = field.NewFloat64(table, "item_sell_discount")
	i.ItemSellPpn = field.NewInt32(table, "item_sell_ppn")
	i.ItemSellUnit = field.NewString(table, "item_sell_unit")

	i.fillFieldMap()

	return i
}

func (i *itemSell) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemSell) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["item_sell_id"] = i.ItemSellID
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["invoice_id"] = i.InvoiceID
	i.fieldMap["item_sell_qty"] = i.ItemSellQty
	i.fieldMap["item_sell_time"] = i.ItemSellTime
	i.fieldMap["item_sell_discount"] = i.ItemSellDiscount
	i.fieldMap["item_sell_ppn"] = i.ItemSellPpn
	i.fieldMap["item_sell_unit"] = i.ItemSellUnit
}

func (i itemSell) clone(db *gorm.DB) itemSell {
	i.itemSellDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemSell) replaceDB(db *gorm.DB) itemSell {
	i.itemSellDo.ReplaceDB(db)
	return i
}

type itemSellDo struct{ gen.DO }

func (i itemSellDo) Debug() *itemSellDo {
	return i.withDO(i.DO.Debug())
}

func (i itemSellDo) WithContext(ctx context.Context) *itemSellDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemSellDo) ReadDB() *itemSellDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemSellDo) WriteDB() *itemSellDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemSellDo) Session(config *gorm.Session) *itemSellDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemSellDo) Clauses(conds ...clause.Expression) *itemSellDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemSellDo) Returning(value interface{}, columns ...string) *itemSellDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemSellDo) Not(conds ...gen.Condition) *itemSellDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemSellDo) Or(conds ...gen.Condition) *itemSellDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemSellDo) Select(conds ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemSellDo) Where(conds ...gen.Condition) *itemSellDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemSellDo) Order(conds ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemSellDo) Distinct(cols ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemSellDo) Omit(cols ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemSellDo) Join(table schema.Tabler, on ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemSellDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemSellDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemSellDo) Group(cols ...field.Expr) *itemSellDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemSellDo) Having(conds ...gen.Condition) *itemSellDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemSellDo) Limit(limit int) *itemSellDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemSellDo) Offset(offset int) *itemSellDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemSellDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemSellDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemSellDo) Unscoped() *itemSellDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemSellDo) Create(values ...*model.ItemSell) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemSellDo) CreateInBatches(values []*model.ItemSell, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemSellDo) Save(values ...*model.ItemSell) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemSellDo) First() (*model.ItemSell, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSell), nil
	}
}

func (i itemSellDo) Take() (*model.ItemSell, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSell), nil
	}
}

func (i itemSellDo) Last() (*model.ItemSell, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSell), nil
	}
}

func (i itemSellDo) Find() ([]*model.ItemSell, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemSell), err
}

func (i itemSellDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemSell, err error) {
	buf := make([]*model.ItemSell, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemSellDo) FindInBatches(result *[]*model.ItemSell, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemSellDo) Attrs(attrs ...field.AssignExpr) *itemSellDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemSellDo) Assign(attrs ...field.AssignExpr) *itemSellDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemSellDo) Joins(fields ...field.RelationField) *itemSellDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemSellDo) Preload(fields ...field.RelationField) *itemSellDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemSellDo) FirstOrInit() (*model.ItemSell, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSell), nil
	}
}

func (i itemSellDo) FirstOrCreate() (*model.ItemSell, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSell), nil
	}
}

func (i itemSellDo) FindByPage(offset int, limit int) (result []*model.ItemSell, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemSellDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemSellDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemSellDo) Delete(models ...*model.ItemSell) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemSellDo) withDO(do gen.Dao) *itemSellDo {
	i.DO = *do.(*gen.DO)
	return i
}
