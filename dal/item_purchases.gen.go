// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newItemPurchase(db *gorm.DB, opts ...gen.DOOption) itemPurchase {
	_itemPurchase := itemPurchase{}

	_itemPurchase.itemPurchaseDo.UseDB(db, opts...)
	_itemPurchase.itemPurchaseDo.UseModel(&model.ItemPurchase{})

	tableName := _itemPurchase.itemPurchaseDo.TableName()
	_itemPurchase.ALL = field.NewAsterisk(tableName)
	_itemPurchase.ItemPurchaseID = field.NewInt32(tableName, "item_purchase_id")
	_itemPurchase.ItemID = field.NewInt32(tableName, "item_id")
	_itemPurchase.BillID = field.NewInt32(tableName, "bill_id")
	_itemPurchase.RecurringBillID = field.NewInt32(tableName, "recurring_bill_id")
	_itemPurchase.ItemPurchaseQty = field.NewInt32(tableName, "item_purchase_qty")
	_itemPurchase.ItemPurchaseTime = field.NewTime(tableName, "item_purchase_time")
	_itemPurchase.ItemPurchaseDiscount = field.NewFloat64(tableName, "item_purchase_discount")
	_itemPurchase.ItemPurchasePpn = field.NewInt32(tableName, "item_purchase_ppn")
	_itemPurchase.ItemPurchaseUnit = field.NewString(tableName, "item_purchase_unit")

	_itemPurchase.fillFieldMap()

	return _itemPurchase
}

type itemPurchase struct {
	itemPurchaseDo

	ALL                  field.Asterisk
	ItemPurchaseID       field.Int32
	ItemID               field.Int32
	BillID               field.Int32
	RecurringBillID      field.Int32
	ItemPurchaseQty      field.Int32
	ItemPurchaseTime     field.Time
	ItemPurchaseDiscount field.Float64
	ItemPurchasePpn      field.Int32
	ItemPurchaseUnit     field.String

	fieldMap map[string]field.Expr
}

func (i itemPurchase) Table(newTableName string) *itemPurchase {
	i.itemPurchaseDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemPurchase) As(alias string) *itemPurchase {
	i.itemPurchaseDo.DO = *(i.itemPurchaseDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemPurchase) updateTableName(table string) *itemPurchase {
	i.ALL = field.NewAsterisk(table)
	i.ItemPurchaseID = field.NewInt32(table, "item_purchase_id")
	i.ItemID = field.NewInt32(table, "item_id")
	i.BillID = field.NewInt32(table, "bill_id")
	i.RecurringBillID = field.NewInt32(table, "recurring_bill_id")
	i.ItemPurchaseQty = field.NewInt32(table, "item_purchase_qty")
	i.ItemPurchaseTime = field.NewTime(table, "item_purchase_time")
	i.ItemPurchaseDiscount = field.NewFloat64(table, "item_purchase_discount")
	i.ItemPurchasePpn = field.NewInt32(table, "item_purchase_ppn")
	i.ItemPurchaseUnit = field.NewString(table, "item_purchase_unit")

	i.fillFieldMap()

	return i
}

func (i *itemPurchase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemPurchase) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["item_purchase_id"] = i.ItemPurchaseID
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["bill_id"] = i.BillID
	i.fieldMap["recurring_bill_id"] = i.RecurringBillID
	i.fieldMap["item_purchase_qty"] = i.ItemPurchaseQty
	i.fieldMap["item_purchase_time"] = i.ItemPurchaseTime
	i.fieldMap["item_purchase_discount"] = i.ItemPurchaseDiscount
	i.fieldMap["item_purchase_ppn"] = i.ItemPurchasePpn
	i.fieldMap["item_purchase_unit"] = i.ItemPurchaseUnit
}

func (i itemPurchase) clone(db *gorm.DB) itemPurchase {
	i.itemPurchaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemPurchase) replaceDB(db *gorm.DB) itemPurchase {
	i.itemPurchaseDo.ReplaceDB(db)
	return i
}

type itemPurchaseDo struct{ gen.DO }

func (i itemPurchaseDo) Debug() *itemPurchaseDo {
	return i.withDO(i.DO.Debug())
}

func (i itemPurchaseDo) WithContext(ctx context.Context) *itemPurchaseDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemPurchaseDo) ReadDB() *itemPurchaseDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemPurchaseDo) WriteDB() *itemPurchaseDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemPurchaseDo) Session(config *gorm.Session) *itemPurchaseDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemPurchaseDo) Clauses(conds ...clause.Expression) *itemPurchaseDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemPurchaseDo) Returning(value interface{}, columns ...string) *itemPurchaseDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemPurchaseDo) Not(conds ...gen.Condition) *itemPurchaseDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemPurchaseDo) Or(conds ...gen.Condition) *itemPurchaseDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemPurchaseDo) Select(conds ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemPurchaseDo) Where(conds ...gen.Condition) *itemPurchaseDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemPurchaseDo) Order(conds ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemPurchaseDo) Distinct(cols ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemPurchaseDo) Omit(cols ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemPurchaseDo) Join(table schema.Tabler, on ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemPurchaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemPurchaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemPurchaseDo) Group(cols ...field.Expr) *itemPurchaseDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemPurchaseDo) Having(conds ...gen.Condition) *itemPurchaseDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemPurchaseDo) Limit(limit int) *itemPurchaseDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemPurchaseDo) Offset(offset int) *itemPurchaseDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemPurchaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemPurchaseDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemPurchaseDo) Unscoped() *itemPurchaseDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemPurchaseDo) Create(values ...*model.ItemPurchase) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemPurchaseDo) CreateInBatches(values []*model.ItemPurchase, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemPurchaseDo) Save(values ...*model.ItemPurchase) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemPurchaseDo) First() (*model.ItemPurchase, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemPurchase), nil
	}
}

func (i itemPurchaseDo) Take() (*model.ItemPurchase, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemPurchase), nil
	}
}

func (i itemPurchaseDo) Last() (*model.ItemPurchase, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemPurchase), nil
	}
}

func (i itemPurchaseDo) Find() ([]*model.ItemPurchase, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemPurchase), err
}

func (i itemPurchaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemPurchase, err error) {
	buf := make([]*model.ItemPurchase, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemPurchaseDo) FindInBatches(result *[]*model.ItemPurchase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemPurchaseDo) Attrs(attrs ...field.AssignExpr) *itemPurchaseDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemPurchaseDo) Assign(attrs ...field.AssignExpr) *itemPurchaseDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemPurchaseDo) Joins(fields ...field.RelationField) *itemPurchaseDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemPurchaseDo) Preload(fields ...field.RelationField) *itemPurchaseDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemPurchaseDo) FirstOrInit() (*model.ItemPurchase, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemPurchase), nil
	}
}

func (i itemPurchaseDo) FirstOrCreate() (*model.ItemPurchase, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemPurchase), nil
	}
}

func (i itemPurchaseDo) FindByPage(offset int, limit int) (result []*model.ItemPurchase, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemPurchaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemPurchaseDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemPurchaseDo) Delete(models ...*model.ItemPurchase) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemPurchaseDo) withDO(do gen.Dao) *itemPurchaseDo {
	i.DO = *do.(*gen.DO)
	return i
}
