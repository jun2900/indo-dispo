// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jun2900/indo-dispo/model"
)

func newInvoice(db *gorm.DB, opts ...gen.DOOption) invoice {
	_invoice := invoice{}

	_invoice.invoiceDo.UseDB(db, opts...)
	_invoice.invoiceDo.UseModel(&model.Invoice{})

	tableName := _invoice.invoiceDo.TableName()
	_invoice.ALL = field.NewAsterisk(tableName)
	_invoice.InvoicesID = field.NewInt32(tableName, "invoices_id")
	_invoice.SupplierID = field.NewInt32(tableName, "supplier_id")
	_invoice.InvoiceStartDate = field.NewTime(tableName, "invoice_start_date")
	_invoice.InvoiceDueDate = field.NewTime(tableName, "invoice_due_date")
	_invoice.InvoiceNumber = field.NewString(tableName, "invoice_number")
	_invoice.InvoiceOrderNumber = field.NewString(tableName, "invoice_order_number")
	_invoice.InvoiceTitle = field.NewString(tableName, "invoice_title")
	_invoice.InvoiceSubheading = field.NewString(tableName, "invoice_subheading")
	_invoice.InvoiceLogo = field.NewBytes(tableName, "invoice_logo")
	_invoice.InvoiceShippingCost = field.NewFloat64(tableName, "invoice_shipping_cost")
	_invoice.InvoiceAccountNumber = field.NewString(tableName, "invoice_account_number")
	_invoice.InvoiceBankName = field.NewString(tableName, "invoice_bank_name")
	_invoice.InvoiceTotal = field.NewFloat64(tableName, "invoice_total")
	_invoice.InvoiceStatus = field.NewString(tableName, "invoice_status")
	_invoice.InvoiceNotes = field.NewString(tableName, "invoice_notes")

	_invoice.fillFieldMap()

	return _invoice
}

type invoice struct {
	invoiceDo

	ALL                  field.Asterisk
	InvoicesID           field.Int32
	SupplierID           field.Int32
	InvoiceStartDate     field.Time
	InvoiceDueDate       field.Time
	InvoiceNumber        field.String
	InvoiceOrderNumber   field.String
	InvoiceTitle         field.String
	InvoiceSubheading    field.String
	InvoiceLogo          field.Bytes
	InvoiceShippingCost  field.Float64
	InvoiceAccountNumber field.String
	InvoiceBankName      field.String
	InvoiceTotal         field.Float64
	InvoiceStatus        field.String
	InvoiceNotes         field.String

	fieldMap map[string]field.Expr
}

func (i invoice) Table(newTableName string) *invoice {
	i.invoiceDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoice) As(alias string) *invoice {
	i.invoiceDo.DO = *(i.invoiceDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoice) updateTableName(table string) *invoice {
	i.ALL = field.NewAsterisk(table)
	i.InvoicesID = field.NewInt32(table, "invoices_id")
	i.SupplierID = field.NewInt32(table, "supplier_id")
	i.InvoiceStartDate = field.NewTime(table, "invoice_start_date")
	i.InvoiceDueDate = field.NewTime(table, "invoice_due_date")
	i.InvoiceNumber = field.NewString(table, "invoice_number")
	i.InvoiceOrderNumber = field.NewString(table, "invoice_order_number")
	i.InvoiceTitle = field.NewString(table, "invoice_title")
	i.InvoiceSubheading = field.NewString(table, "invoice_subheading")
	i.InvoiceLogo = field.NewBytes(table, "invoice_logo")
	i.InvoiceShippingCost = field.NewFloat64(table, "invoice_shipping_cost")
	i.InvoiceAccountNumber = field.NewString(table, "invoice_account_number")
	i.InvoiceBankName = field.NewString(table, "invoice_bank_name")
	i.InvoiceTotal = field.NewFloat64(table, "invoice_total")
	i.InvoiceStatus = field.NewString(table, "invoice_status")
	i.InvoiceNotes = field.NewString(table, "invoice_notes")

	i.fillFieldMap()

	return i
}

func (i *invoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoice) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 15)
	i.fieldMap["invoices_id"] = i.InvoicesID
	i.fieldMap["supplier_id"] = i.SupplierID
	i.fieldMap["invoice_start_date"] = i.InvoiceStartDate
	i.fieldMap["invoice_due_date"] = i.InvoiceDueDate
	i.fieldMap["invoice_number"] = i.InvoiceNumber
	i.fieldMap["invoice_order_number"] = i.InvoiceOrderNumber
	i.fieldMap["invoice_title"] = i.InvoiceTitle
	i.fieldMap["invoice_subheading"] = i.InvoiceSubheading
	i.fieldMap["invoice_logo"] = i.InvoiceLogo
	i.fieldMap["invoice_shipping_cost"] = i.InvoiceShippingCost
	i.fieldMap["invoice_account_number"] = i.InvoiceAccountNumber
	i.fieldMap["invoice_bank_name"] = i.InvoiceBankName
	i.fieldMap["invoice_total"] = i.InvoiceTotal
	i.fieldMap["invoice_status"] = i.InvoiceStatus
	i.fieldMap["invoice_notes"] = i.InvoiceNotes
}

func (i invoice) clone(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoice) replaceDB(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceDB(db)
	return i
}

type invoiceDo struct{ gen.DO }

func (i invoiceDo) Debug() *invoiceDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceDo) WithContext(ctx context.Context) *invoiceDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceDo) ReadDB() *invoiceDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceDo) WriteDB() *invoiceDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceDo) Session(config *gorm.Session) *invoiceDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceDo) Clauses(conds ...clause.Expression) *invoiceDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceDo) Returning(value interface{}, columns ...string) *invoiceDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceDo) Not(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceDo) Or(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceDo) Select(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceDo) Where(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceDo) Order(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceDo) Distinct(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceDo) Omit(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceDo) Join(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceDo) Group(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceDo) Having(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceDo) Limit(limit int) *invoiceDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceDo) Offset(offset int) *invoiceDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceDo) Unscoped() *invoiceDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceDo) Create(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceDo) CreateInBatches(values []*model.Invoice, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceDo) Save(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceDo) First() (*model.Invoice, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Take() (*model.Invoice, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Last() (*model.Invoice, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Find() ([]*model.Invoice, error) {
	result, err := i.DO.Find()
	return result.([]*model.Invoice), err
}

func (i invoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Invoice, err error) {
	buf := make([]*model.Invoice, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceDo) FindInBatches(result *[]*model.Invoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceDo) Attrs(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceDo) Assign(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceDo) Joins(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceDo) Preload(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceDo) FirstOrInit() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FirstOrCreate() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FindByPage(offset int, limit int) (result []*model.Invoice, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceDo) Delete(models ...*model.Invoice) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceDo) withDO(do gen.Dao) *invoiceDo {
	i.DO = *do.(*gen.DO)
	return i
}
